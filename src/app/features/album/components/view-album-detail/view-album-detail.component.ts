import { Component } from '@angular/core';
import { MatIconModule } from '@angular/material/icon';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatGridListModule } from '@angular/material/grid-list';
import { ActivatedRoute } from '@angular/router';
import { DriveService } from '../../../../shared/services/drive.service';
import { AlbumService } from '../../services/albums.services';
import { MatDialog } from '@angular/material/dialog';
import { UpdateAlbumComponent } from '../update-album/update-album.component';
import { PhotoService } from '../../services/photo.services';
import { LoadingSpinnerComponent } from '../../../../shared/layouts/loading-spinner/loading-spinner.component';

@Component({
  selector: 'app-view-album-detail',
  imports: [
    MatIconModule,
    CommonModule,
    MatCardModule,
    MatGridListModule,
    MatButtonModule,
    LoadingSpinnerComponent,
  ],
  templateUrl: './view-album-detail.component.html',
  styleUrls: ['./view-album-detail.component.css'], // S·ª≠a l·∫°i th√†nh styleUrls
})
export class ViewAlbumDetailComponent {
  albumId!: string; // L∆∞u tr·ªØ albumId t·ª´ URL
  images: any[] = [];
  hasMoreImages: boolean = true;
  albums: any;
  folderUrl: any;
  isLoading = true;
  isLoadingSpinner = false;
  errorMessage: string = '';
  pageNumber: number = 1; // S·ªë trang b·∫Øt ƒë·∫ßu
  pageSize: number = 50;

  constructor(
    private route: ActivatedRoute,
    private driveService: DriveService,
    private albumService: AlbumService,
    private dialog: MatDialog,
    private photoService: PhotoService
  ) {}

  ngOnInit() {
    this.route.paramMap.subscribe((params) => {
      this.albumId = params.get('id') || '';
      console.log('Album ID:', this.albumId);

      // G·ªçi API l·∫•y th√¥ng tin album tr∆∞·ªõc
      this.albumService.getAlbumsById(this.albumId).subscribe({
        next: (data) => {
          this.albums = data.resultOnly;
          console.log('Albums:', this.albums);

          // Ch·ªâ g·ªçi API l·∫•y ·∫£nh sau khi ƒë√£ c√≥ link Google Drive
          if (this.albums.id) {
            this.loadImagesFromDrive(this.albums.id);
          } else {
            console.error('Album kh√¥ng c√≥ link Google Drive!');
          }
        },
        error: (err) => {
          console.error('L·ªói khi l·∫•y album:', err);
        },
      });
    });
    setTimeout(() => {
      window.addEventListener('scroll', () => this.onScroll());
    }, 500);
  }

  // onScroll(event: any) {
  //   // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ cu·ªôn xu·ªëng d∆∞·ªõi c√πng
  //   const bottom = event.target.scrollHeight === event.target.scrollTop + event.target.clientHeight;
  //   if (bottom && !this.isLoading) {
  //     this.pageNumber++;  // TƒÉng s·ªë trang khi cu·ªôn xu·ªëng
  //     this.loadImagesFromDrive(this.albumId);  // T·∫£i ·∫£nh ti·∫øp theo
  //   }
  // }

  ngOnDestroy() {
    // X√≥a s·ª± ki·ªán scroll khi component b·ªã h·ªßy
    window.removeEventListener('scroll', this.onScroll.bind(this));
  }

  onScroll() {
    if (
      window.innerHeight + window.scrollY >=
      document.body.offsetHeight - 10
    ) {
      console.log('ƒê√£ ch·∫°m cu·ªëi trang!');

      if (!this.isLoading && this.hasMoreImages) {
        this.pageNumber++; // TƒÉng s·ªë trang
        console.log(`T·∫£i th√™m ·∫£nh - Trang: ${this.pageNumber}`);
        this.loadImagesFromDrive(this.albumId); // T·∫£i ·∫£nh ti·∫øp theo
      }
    }
  }

  reloadAlbum() {
    this.albumService.updateAlbumImages(this.albumId).subscribe({
      next: () => {
        console.log('Album ƒë√£ c·∫≠p nh·∫≠t, t·∫£i l·∫°i ·∫£nh...');
        this.loadImagesFromDrive(this.albumId);
      },
      error: (err) => {
        console.error('L·ªói khi c·∫≠p nh·∫≠t album:', err);
      },
    });
  }

  loadImagesFromDrive(albumId: string) {
    this.isLoading = true; // B·∫≠t tr·∫°ng th√°i loading khi b·∫Øt ƒë·∫ßu t·∫£i ·∫£nh
    this.driveService
      .getImages(albumId, this.pageNumber, this.pageSize)
      .subscribe({
        next: (data) => {
          console.log('üöÄ API Response:', data);

          // Ki·ªÉm tra xem `resultOnly` v√† `photos` c√≥ t·ªìn t·∫°i v√† c√≥ ph·∫£i m·∫£ng kh√¥ng
          if (
            data.resultOnly &&
            Array.isArray(data.resultOnly.photos) &&
            data.resultOnly.photos.length > 0
          ) {
            // Th√™m ·∫£nh m·ªõi v√†o cu·ªëi m·∫£ng ·∫£nh hi·ªán t·∫°i (kh√¥ng reset m·∫£ng)
            const newImages = data.resultOnly.photos.map((file: any) => ({
              filePath: file.filePath,
              id: file.id,
              liked: false,
              isFavorite: file.isFavorite,
              isRecommend: file.isRecommend,
              likes: file.likeNumber || 0,
            }));

            // Th√™m ·∫£nh v√†o cu·ªëi m·∫£ng `images` hi·ªán t·∫°i
            this.images.push(...newImages); // Kh√¥ng thay th·∫ø, ch·ªâ th√™m ·∫£nh m·ªõi v√†o

            console.log('‚úÖ ·∫¢nh ƒë√£ t·∫£i:', this.images);

            // Ki·ªÉm tra n·∫øu ·∫£nh t·∫£i v·ªÅ √≠t h∆°n s·ªë ·∫£nh c·∫ßn t·∫£i (pageSize), ·∫©n n√∫t "Xem th√™m"
            if (data.resultOnly.photos.length < this.pageSize) {
              this.hasMoreImages = false; // ƒê·∫∑t gi√° tr·ªã false ƒë·ªÉ ·∫©n n√∫t "Xem th√™m"
            }
          } else {
            console.error(
              '‚ùå Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh trong folder!',
              data.resultOnly
            );
            this.errorMessage = 'Kh√¥ng c√≥ h√¨nh ·∫£nh trong album n√†y!';
          }
          this.isLoading = false; // D·ª´ng tr·∫°ng th√°i loading khi ·∫£nh ƒë√£ t·∫£i
        },
        error: (err) => {
          console.error('‚ùå L·ªói khi t·∫£i ·∫£nh t·ª´ API:', err);
          this.isLoading = false;
          this.errorMessage = 'L·ªói khi t·∫£i ·∫£nh!';
        },
      });
  }

  loadMore() {
    if (this.hasMoreImages) {
      this.pageNumber++; // TƒÉng s·ªë trang
      this.loadImagesFromDrive(this.albumId); // T·∫£i ·∫£nh ti·∫øp theo
    }
  }
  openUpdateDialog(album: any) {
    const dialogRef = this.dialog.open(UpdateAlbumComponent, {
      width: '500px',
      data: { album: album },
    });

    dialogRef.afterClosed().subscribe((result) => {
      // window.location.reload();
    });
  }

  // Function - Event Click Add Recommend Photo
  addRecommedPhoto(id: string, isRecommended: boolean, image: any) {
    console.log(
      'Photo to add recommend: ',
      id,
      ' isRecommended? = ',
      isRecommended
    );
    if (isRecommended) {
      this.isLoadingSpinner = true;
      this.photoService.removeRecommendPhoto(id).subscribe(
        (response) => {
          console.log('Response Call API Remove Recommend Photo: ', response);
          image.isRecommend = false;
          this.isLoadingSpinner = false;
        },
        (error) => {
          console.log('Error Call API Remove Recommend Photo: ', error);
          this.isLoadingSpinner = false;
        }
      );
    } else {
      this.isLoadingSpinner = true;
      this.photoService.addRecommendPhoto(id).subscribe(
        (response) => {
          console.log('Response Call API Add Recommend Photo: ', response);
          image.isRecommend = true;
          this.isLoadingSpinner = false;
        },
        (error) => {
          console.log('Error Call API Add Recommend Photo: ', error);
          this.isLoadingSpinner = false;
        }
      );
    }
  }
}
